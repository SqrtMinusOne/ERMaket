{%- macro roles_ref() %}
    user_login = sa.Column(sa.String(256), sa.ForeignKey('system.user.login'), unique=True)

    linked_user = sa.orm.relationship('User', foreign_keys=[user_login], backref='linked_{{ table.name }}')
{% endmacro -%}
{%- macro rel_name(rel) -%}
{%- if rel.fk_col is not none -%}
{{ Names.referrer_rel_name(rel.ref_table.name, rel.name) }}
{%- else -%}
{{ Names.referral_rel_name(rel.ref_table.name, rel.name) }}
{%- endif -%}
{%- endmacro -%}
{%- macro column_attrs(col) -%}
{%- if col.pk -%}
primary_key=True,
{%- endif -%}
nullable = {{ not col.not_null }},
{%- if col.unique -%}
unique=True,
{%- endif -%}
{%- if col.auto_inc and not col.fk -%}
autoincrement=True,
{%- endif -%}
{% endmacro %}

import sqlalchemy as sa

from .base import Base

__all__ = ['{{ Names.class_name(schema, table.name) }}']


class {{ Names.class_name(schema, table.name) }}(Base):
    __tablename__ = '{{ table.name }}'
    __table_args__ = (
        {% if table.uniques %}
        sa.UniqueConstraint(
            {%- for col in table.uniques -%}
            '{{ Names.attribute_name(col.name) }}',
            {%- endfor -%}
        ),
        {% endif %}
        {'schema': '{{ schema }}'}
    )
    {% for col in table.columns %}
    {{ Names.attribute_name(col.name) }} = sa.Column(sa.{{ sa_type(col.type_, col.name) }}, {{ column_attrs(col) }})
    {%- endfor %}
    {% for col in table.foreign_keys %}
    {{ Names.attribute_name(col.name) }} = sa.Column(sa.{{ sa_type(col.type_, col.name) }}, sa.ForeignKey('{{ schema }}.{{ col.fk.table.name }}.{{ col.fk.column.name }}', ondelete='{{ col.fk.ondelete }}', onupdate='{{ col.fk.onupdate }}'), {{ column_attrs(col) }})
    {%- endfor %}
    {% for rel in table.primary_rels -%}
    {%- if rel.fk_col is not none %}
    {{ Names.referrer_rel_name(rel.ref_table.name, rel.name) }} = sa.orm.relationship('{{ Names.class_name(schema, rel.ref_table.name) }}', back_populates='{{ Names.referral_rel_name(table.name, rel.name) }}', foreign_keys=[{{ Names.attribute_name(rel.fk_col.name) }}])
    {%- else %}
    {{ Names.referral_rel_name(rel.ref_table.name, rel.name) }} = sa.orm.relationship('{{ Names.class_name(schema, rel.ref_table.name) }}', back_populates='{{ Names.referrer_rel_name(table.name, rel.name) }}')
    {% endif -%}
    {% endfor -%}
    {%- for rel in table.secondary_rels %}
    {{ Names.referrer_rel_name(rel.ref_table.name, rel.name) }} = sa.orm.relationship('{{ Names.class_name(schema, rel.ref_table.name) }}', secondary='{{ schema }}.{{ rel.secondary_table.name }}', back_populates='{{ Names.referrer_rel_name(table.name, rel.name) }}')
    {% endfor -%}
    {% if table._system_ref == '__user' %}
    {{ roles_ref() }}
    {% endif %}
    {% if add_check %}
    def check_not_empty(self):
        """An autogenerated method.
        Call this after creation or update to check mandatory relationships.
        Returns False if at least one mandary relationship is invalid
        """
        return all([len(getattr(self, rel_name)) > 0 for rel_name in (
            {%- for rel in table.check_not_empty -%}
                '{{ rel_name(rel) }}',
            {%- endfor -%}
        )])

    def check_not_last(self):
        """An autogenerated method.
        Call this before deleting the object to check mandatory relationships.
        Returns False if at least one mandary relationship will become invalid.
        """
        return all([len(getattr(self, rel_name)) > 1 for rel_name in (
            {%- for rel in table.check_not_last -%}
                '{{ rel_name(rel) }}',
            {%- endfor -%}
        )])
    {% endif %}
