# This file was generated automatically and will be overwritten
# with next generation. Make changes with caution

import sqlalchemy as sa

from .base import Base

__all__ = ['Er1User']


class Er1User(Base):
    __tablename__ = 'user'
    __table_args__ = ({'schema': 'er1'})

    name = sa.Column(
        sa.String(256),
        primary_key=True,
        nullable=False,
        unique=True,
        autoincrement=False
    )

    comment_is_authored_by = sa.orm.relationship(
        'Er1Comment', back_populates='is_authored_by_user'
    )

    is_assigned_to_task = sa.orm.relationship(
        'Er1Task',
        secondary='er1.user_is_assigned_to_task',
        back_populates='is_assigned_to_user'
    )

    def check_not_empty(self):
        """An autogenerated method.
        Call this after creation or update to check mandatory relationships.
        Returns False if at least one mandary relationship is invalid
        """
        return all([len(getattr(self, rel_name)) > 0 for rel_name in ()])

    def check_not_last(self):
        """An autogenerated method.
        Call this before deleting the object to check mandatory relationships.
        Returns False if at least one mandary relationship will become invalid.
        """
        return all([len(getattr(self, rel_name)) > 1 for rel_name in ()])
